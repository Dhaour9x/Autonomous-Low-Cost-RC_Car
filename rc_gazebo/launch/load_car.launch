<?xml version="1.0"?>
<launch>

  <!-- roslaunch arguments -->
  <arg name="namespace" default=""/>
  <arg name="cmd_timeout" default="0.5"/>
  <arg name="publish_gt_tf" default="false"/>

  <!-- Vehicle pose -->
  <arg name="x" default="0"/>
  <arg name="y" default="0"/>
  <arg name="z" default="0.3"/>
  <arg name="roll" default="0.0"/>
  <arg name="pitch" default="0.0"/>
  <arg name="yaw" default="0.0"/>

  <!-- Control Method Argument -->
  <arg name="controlMethod" default="speed"/>
  <arg name="show_rqt_gui" default="true"/>
  <arg name="launch_group" default="default" />

  <!-- Load the URDF into the ROS Parameter Server -->
  <group if="$(eval arg('controlMethod')=='speed')">

    <group if="$(eval arg('launch_group')=='no_perception')">
      <param command="$(find xacro)/xacro --inorder '$(find eufs_description)/robots/ads-dv.urdf.xacro' publish_tf:=$(arg publish_gt_tf) simulate_perception:=true" name="robot_description"/>
    </group>
    <group unless="$(eval arg('launch_group')=='no_perception')">
      <param command="$(find xacro)/xacro --inorder '$(find eufs_description)/robots/ads-dv.urdf.xacro' publish_tf:=$(arg publish_gt_tf) simulate_perception:=false" name="robot_description"/>
    </group>

    <!-- start ros_can_sim node -->
    <include file="$(find ros_can_sim)/launch/ros_can_sim.launch"/>

    <!--start twist to ackermannDrive converter for robot steering plugin -->
    <node pkg="ros_can_sim" name="twist_to_ackermannDrive" type="twist_to_ackermannDrive.py" args="twistToAckermannDrive:=eufsa_control/teleop_vel_out"/>

    <!-- start rqt robot steering module -->
    <group if="$(eval arg('show_rqt_gui'))">
      <node name="eufs_sim_rqt" pkg="rqt_gui" type="rqt_gui" respawn="false" output="screen" args="--perspective-file $(find eufs_gazebo)/config/eufs_sim.perspective"/>
    </group>

  </group>
  <group if="$(eval arg('controlMethod')=='torque')">

    <param command="$(find xacro)/xacro '$(find eufs_description)/robots/ads-dv-torque.urdf.xacro' --inorder" name="robot_description"/>

    <!-- Control the steering, axle, and shock absorber joints. -->
    <node name="ackermann_controller" pkg="ros_can_sim" type="ackermann_controller.py" output="screen">
      <param name="cmd_timeout" value="$(arg cmd_timeout)"/>

      <param name="vehicle_prefix" value=""/>
      <!--Namespaces really need to be cleaned up, we're not consistent and it's a mess >:( -->
      <!--<param name="vehicle_prefix" value="$(arg namespace)"/>-->

      <rosparam file="$(find ros_can_sim)/config/ackermann_controller.yaml" command="load"/>
      <rosparam param="driveCommandProirities" command="load" file="$(find ros_can_sim)/config/driveCommandPriorities.yaml"/>
    </node>

    <!--start twist to ackermannDrive converter for robot steering plugin -->
    <node pkg="ros_can_sim" name="twist_to_driveCommand2" type="twist_to_driveCommand2.py" output="screen"/>

    <!-- start rqt GUI with control and ros_can interface -->
    <node name="eufs_sim_rqt" pkg="rqt_gui" type="rqt_gui" respawn="false" output="screen" args="--perspective-file $(find eufs_gazebo)/config/eufs_sim.perspective"/>

  </group>

  <node name="spawn_platform" pkg="gazebo_ros" type="spawn_model" args="-urdf -param robot_description -model $(arg namespace)
              -gazebo_namespace /gazebo
              -x $(arg x) -y $(arg y) -z $(arg z)
              -R $(arg roll) -P $(arg pitch) -Y $(arg yaw)"/>

  <!-- load joint controllers -->
  <!--<node name="controller_spawner" pkg="controller_manager" type="spawner" args="$(find ros_can_sim)/config/joint_controller.yaml"/>-->

</launch>
